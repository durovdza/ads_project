import requests
import folium
import numpy as np
import pandas as pd
from geopy.geocoders import Nominatim
from sklearn.neighbors import KNeighborsClassifier
from folium.plugins import MarkerCluster
from PIL import Image
from io import BytesIO
import torch

# Funktion, um Daten von der Overpass API zu holen
def fetch_osm_data(query):
    overpass_url = "http://overpass-api.de/api/interpreter"
    response = requests.get(overpass_url, params={'data': query})
    data = response.json()
    return data

# Query für Parkplätze in Zürich
overpass_query = """
[out:json];
area[name="Zürich"]->.searchArea;
(
  node["amenity"="parking"](area.searchArea);
  way["amenity"="parking"](area.searchArea);
  relation["amenity"="parking"](area.searchArea);
);
out center;
"""

# Daten abrufen
osm_data = fetch_osm_data(overpass_query)

# Extrahieren der Koordinaten
parking_locations = []
for element in osm_data['elements']:
    if 'center' in element:
        lat = element['center']['lat']
        lon = element['center']['lon']
    elif 'lat' in element and 'lon' in element:
        lat = element['lat']
        lon = element['lon']
    else:
        continue
    parking_locations.append((lat, lon))

# In DataFrame umwandeln
parking_df = pd.DataFrame(parking_locations, columns=['latitude', 'longitude'])

# Funktion, um Satellitenbilder von Koordinaten zu erhalten (Mapbox)
def fetch_satellite_image(lat, lon, zoom=18, size=(256, 256), maptype='satellite'):
    mapbox_access_token = "pk.eyJ1IjoibWFpZXJzb3AiLCJhIjoiY2x3amx6OXp2MTBtcDJrbXltNWs3dmZvMyJ9.qqWyYiYnsRumUHJrX95H6A"
    url = f"https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/{lon},{lat},{zoom}/{size[0]}x{size[1]}?access_token={mapbox_access_token}"
    response = requests.get(url)
    image = Image.open(BytesIO(response.content))
    return image

# Beispielbild abrufen (dies sollte in einer Schleife für alle Parkplätze durchgeführt werden)
example_image = fetch_satellite_image(parking_df.iloc[0]['latitude'], parking_df.iloc[0]['longitude'])

# Beispiel: Bild speichern (für manuelle Überprüfung)
example_image.save("example_parking_image.jpg")

# Modell zur Bilderkennung laden (z. B. YOLOv5)
model = torch.hub.load('ultralytics/yolov5', 'yolov5s')  # YOLOv5s-Modell laden

# Funktion zur Vorhersage von Parkplätzen in einem Bild
def detect_parking_lots(image):
    results = model(image)
    return results

# Beispiel: Parkplätze im Bild erkennen
results = detect_parking_lots(example_image)
results.save()  # Speichern der Ergebnisse (in einem Verzeichnis 'runs/detect/exp')

# Funktion zur Geokodierung einer Adresse
def geocode_address(address):
    try:
        geolocator = Nominatim(user_agent="parking_locator", timeout=10)
        location = geolocator.geocode(address)
        if location:
            return (location.latitude, location.longitude)
        else:
            return None
    except Exception as e:
        print("Fehler beim Geocoding der Adresse:", e)
        return None

# Funktion zur Vorhersage der nächsten Parkplätze
def get_nearest_parkings(address_or_current_location, parking_df):
    user_location = geocode_address(address_or_current_location)
    if user_location is None:
        print("Die eingegebene Adresse konnte nicht gefunden werden.")
        return None, None

    # KNN-Modell trainieren
    knn = KNeighborsClassifier(n_neighbors=5)
    knn.fit(parking_df[['latitude', 'longitude']], np.arange(len(parking_df)))

    # Nächste Parkplätze vorhersagen
    nearest_indices = knn.kneighbors([user_location], n_neighbors=5, return_distance=False)
    nearest_parkings = parking_df.iloc[nearest_indices[0]]
    
    return user_location, nearest_parkings

# Funktion zur Anzeige auf der Karte
def display_on_map(user_location, nearest_parkings):
    m = folium.Map(location=user_location, zoom_start=15)
    folium.Marker(location=user_location, popup="User Location", icon=folium.Icon(color='red', icon='home')).add_to(m)
    marker_cluster = MarkerCluster().add_to(m)

    for _, row in nearest_parkings.iterrows():
        folium.Marker(location=[row['latitude'], row['longitude']], popup="Parking Lot", icon=folium.Icon(color='blue', icon='info-sign')).add_to(marker_cluster)

    m.save('nearest_parkings_map.html')
    print("Map saved as nearest_parkings_map.html")

# Hauptfunktion
def main():
    address = input("Bitte geben Sie die Adresse ein (z. B. Uraniastrasse 3, 8001 Zürich, Schweiz): ")
    user_location, nearest_parkings = get_nearest_parkings(address, parking_df)
    
    if nearest_parkings is not None:
        display_on_map(user_location, nearest_parkings)

if __name__ == '__main__':
    main()
